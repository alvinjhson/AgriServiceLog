# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: alvinjhson
# "service" is the name of this project. This will also be added to your AWS resource names.
service: AgriServiceLog

provider:
  name: aws
  runtime: nodejs20.x
  profile: test
  region: eu-north-1
  stage: ${opt:stage, 'dev'}
  iam:
    role: ${env:IAM_ROLE}
  environment:
    AWS_USER_MACHINES_TABLE: ${env:AWS_USER_MACHINES_TABLE} 
  httpApi:
    cors:
      allowedOrigins:
        - ${env:VITE_FRONTEND_BASE_URL}
      allowedMethods:
        - OPTIONS
        - GET
        - POST
        - PUT
        - DELETE
      allowedHeaders:
        - Content-Type
        - Authorization
      allowCredentials: false

package:
  individually: true  

functions: 
  signUp:
    handler: functions/signUp/index.handler
    events:
      - httpApi:
          path: "/auth/signup"
          method: POST
  logIn:
    handler: functions/login/index.handler
    events:
      - httpApi:
          path: "/auth/login"
          method: POST
  requestResetPassword:
    handler: functions/requestResetPassword/index.handler
    events:
      - httpApi:
          path: "/auth/request-password-reset"
          method: POST
  resetPassword:
    handler: functions/resetPassword/index.handler
    events:
      - httpApi:
          path: "/auth/reset-password"
          method: POST
  verifyEmail:
    handler: functions/verifyEmail/index.handler
    events:
      - httpApi:
          path: /auth/verify-email
          method: GET
  postMachineUser:
    handler: functions/postMachineUser/index.handler
    events:
      - httpApi:
          path: /machine-user
          method: POST        
  getMachineUser:
    handler: functions/getMachineUser/index.handler
    events:
      - httpApi:
          path: /get-machine
          method: GET    
  updateMachineService:
    handler: functions/updateMachineService/index.handler
    events:
      - httpApi:
          path: /update-machine
          method: PUT
         
          
resources: 
  Resources:
    usersDb:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:AWS_TABLE}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: resetToken
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ResetTokenIndex
            KeySchema:
              - AttributeName: resetToken
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    userMachinesDb:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:AWS_USER_MACHINES_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: machineId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: machineId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    





